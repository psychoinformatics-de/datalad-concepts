id: https://concepts.datalad.org/s/prov/unreleased
name: prov-schema
version: UNRELEASED
status: bibo:status/draft
title: Schema for a generic (data) provenance annotation
description: |
  This schema builds on the [Thing
  schema](https://concepts.datalad.org/s/thing), and diversifies it to capture
  the key provenance concepts [`Agent`](Agent), [`Activity`](Activity),
  [`Entity`](Entity), and their relationships.  It does that by drawing on (a
  subset) of the PROV data model [PROV-DM](https://www.w3.org/TR/prov-dm).

  Central paradigm of the schema is the [qualified relation
  pattern](https://patterns.dataincubator.org/book/qualified-relation.html).
  The three [`Thing`](Thing) derived key concepts `Agent`, `Activity`, and
  `Entity` build on the `Thing` slot `relations` (symmetric property) for
  **inline declaration** of related things, and extend the basic means of
  qualifying a relationship via [`is_characterized_by`](is_characterized_by)
  and with provenance specific slots, and
  [`qualified_relations`](qualified_relations) for declaring the roles of
  related things.
 
  Specifically the latter approach takes the place of all of the various
  `qualified*` properties defined in `PROV`. Rather than supporting association
  classes like `prov:Derivation` or `prov:Generation`, such relationships are
  annotated by linking to things via slots like
  [`was_derived_from`](was_derived_from) or
  [`was_generated_by`](was_generated_by), and characterizing the relationship
  via [`qualified_relations`](qualified_relations), and a (custom)
  [`Role`](Role) declaration.
 
  The schema is entity-centric, meaning that entity properties are preferred
  over activity properties expressing the same (inverse) relationship. For
  example, an entity's [`was_generated_by`](was_generated_by) is implemented,
  but not an activity's `generated`.

  With [`Person`](Person), [`Organization`](Organization), and
  [`SoftwareAgent`](SoftwareAgent), the three essential [`Agent`](Agent) types
  included in `PROV` are supported. However, these classes provide no
  additional slots over their base class. Their purpose is only semantic
  differentiation.

  A custom CURIE prefix `email:` is defined and emitted to allow for using
  emails as suitable schema identifiers for an email address (e.g.,
  `email:me@example.com`).

  The schema definition is available as

  - [JSON-LD context](../unreleased.jsonld)
  - [LinkML YAML](../unreleased.yaml)
  - [OWL TTL](../unreleased.owl.ttl)

comments:
  - ALL CONTENT HERE IS UNRELEASED AND MAY CHANGE ANY TIME

license: MIT

prefixes:
  bibo: http://purl.org/ontology/bibo/
  dlco: https://concepts.datalad.org/
  dlschemas: https://concepts.datalad.org/s/
  dlprov: https://concepts.datalad.org/s/prov/unreleased/
  dlidentifiers: https://concepts.datalad.org/s/identifiers/unreleased/
  dlroles: https://concepts.datalad.org/s/roles/unreleased/
  dlthing: https://concepts.datalad.org/s/thing/unreleased/
  foaf: http://xmlns.com/foaf/0.1/
  linkml: https://w3id.org/linkml/
  obo: http://purl.obolibrary.org/obo/
  prov: http://www.w3.org/ns/prov#
  # declare a namespace for emails, such that they can be defined as a curie
  # e.g.: email:me@example.com
  # -> https://concepts.datalad.org/ns/email/me@example.com
  email: https://concepts.datalad.org/ns/email/
  # disambiguate a GEO URI from a curie prefix
  geo: "geo:"

default_prefix: dlprov

emit_prefixes:
  - dlprov
  - prov

imports:
  - dlschemas:thing/unreleased
  - dlschemas:identifiers/unreleased
  - dlschemas:roles/unreleased
  - dlschemas:spatial/unreleased
  - dlschemas:temporal/unreleased


slots:
  acted_on_behalf_of:
    slot_uri: dlprov:acted_on_behalf_of
    description: >-
      Assign the authority and responsibility for carrying out a specific
      activity of the subject agent to another agent.
    domain: Agent
    range: Agent
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:actedOnBehalfOf

  was_associated_with:
    slot_uri: dlprov:was_associated_with
    description: >-
      An activity association is an assignment of responsibility to an agent
      for an activity, indicating that the agent had a role in the activity.
      It further allows for a plan to be specified, which is the plan intended
      by the agent to achieve some goals in the context of this activity.
    domain: Activity
    range: Agent
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:wasAssociatedWith

  was_attributed_to:
    slot_uri: dlprov:was_attributed_to
    description: >-
      Attribution is the ascribing of an entity to an agent.
    domain: Entity
    range: Agent
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:wasAttributedTo

  was_derived_from:
    slot_uri: dlprov:was_derived_from
    description: >-
      Derivation is a transformation of an entity into another,
      an update of an entity resulting in a new one, or the
      construction of a new entity based on a pre-existing entity.
    domain: Entity
    range: Entity
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:wasDerivedFrom

  was_generated_by:
    slot_uri: dlprov:was_generated_by
    description: >-
      Generation is the completion of production of a new entity by an activity.
      This entity did not exist before generation and becomes available for usage
      after this generation.
    domain: Entity
    range: Activity
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:wasAttributedTo

  was_informed_by:
    slot_uri: dlprov:was_informed_by
    description: >-
      Communication is the exchange of an entity by two activities, one activity
      using the entity generated by the other.
    domain: Activity
    range: Activity
    inlined: false
    multivalued: true
    exact_mappings:
      - prov:wasInformedBy


classes:
  Agent:
    class_uri: dlprov:Agent
    is_a: Thing
    description: >-
      Something that bears some form of responsibility for an activity
      taking place, for the existence of an entity, or for another
      agent's activity.
    slots:
      - acted_on_behalf_of
      - at_location
      - identifiers
      - qualified_relations
    exact_mappings:
      - foaf:Agent
      - prov:Agent
    comments:
      - >-
        This class does not support even a basic `name` slot, because
        depending on the context, there may not be a suitable name,
        or one name would not be enough. If no specialized derived
        class is available in a context where a `name` or similar
        attribute is desired, it can be expressed via the
        `has_attributes` slot.


  Activity:
    class_uri: dlprov:Activity
    is_a: Thing
    description: >-
      An activity is something that occurs over a period of time and acts
      upon or with entities; it may include consuming, processing,
      transforming, modifying, relocating, using, or generating entities.
    slots:
      - at_location
      - ended_at
      - identifiers
      - qualified_relations
      - started_at
      - was_associated_with
      - was_informed_by
    exact_mappings:
      - prov:Activity
    comments:
      - >-
        This class does not support even a basic `name` slot, because
        depending on the context, there may not be a suitable name,
        or one name would not be enough. If no specialized derived
        class is available in a context where a `name` or similar
        attribute is desired, it can be expressed via the
        `has_attributes` slot.


  Entity:
    class_uri: dlprov:Entity
    is_a: Thing
    description: >-
      A physical, digital, conceptual, or other kind of thing with some
      fixed aspects; entities may be real or imaginary.
    slots:
      - identifiers
      - qualified_relations
      - was_attributed_to
      - was_derived_from
      - was_generated_by
    exact_mappings:
      - prov:Entity

  Person:
    class_uri: dlprov:Person
    is_a: Agent
    description: >-
      Person agents are people, alive, dead, or fictional.
    exact_mappings:
      - foaf:Person
      - prov:Person
    comments:
      - This class does not offer common slots like "affiliation" or "email".
        Instead, this information should be expressed as `qualified_relations`
        to other things with a role characterization. An affiliation can be
        expressed as a relation to an organization, and the role that the
        organization has for the person (e.g., "employer").

  Organization:
    class_uri: dlprov:Organization
    is_a: Agent
    description: >-
      A social or legal instititution such as a company, a society,
      or a university.
    exact_mappings:
      - foaf:Organization
      - prov:Organization
    comments:
      - This class does not offer common slots like "address" or "contact".
        Instead, this information should be expressed as `qualified_relations`
        to other things with a role-characterization. An address can be
        expressed as a relation to a location, and the role this location
        has for the organization (e.g., "main office"). Likewise, a contact
        can be describe as a relation to a person, and the role that this
        person fulfills for the organization (e.g., "spokesperson").

  SoftwareAgent:
    class_uri: dlprov:SoftwareAgent
    is_a: Agent
    description: >-
      Running software.
    exact_mappings:
      - prov:SoftwareAgent
